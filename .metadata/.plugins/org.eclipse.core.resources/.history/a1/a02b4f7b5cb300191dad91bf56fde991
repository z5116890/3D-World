package unsw.graphics.world;

import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.opengl.GL3;
import unsw.graphics.CoordFrame3D;
import unsw.graphics.Shader;
import unsw.graphics.geometry.Point3D;

public class WorldCamera implements KeyListener {
    private Point3D myPos;
    private float myAngle; // Only rotate around y-axis
    private Terrain myTerrain;
    private CoordFrame3D viewFrame;
    
    //avatar
    private Avatar myAvatar;
    private float distanceFromAvatar = 10;
    private float angleAroundAvatar = 0;
    private Point3D avatarPos = new Point3D(-5,0,-15);
    

    public WorldCamera(Terrain terrain, Avatar avatar) {
        myPos = new Point3D(-terrain.getWidth()/2f, 0f, -terrain.getDepth()*2f);
        this.myAvatar = avatar;
        this.myAvatar.setPos(new Point3D(-5, 0f,-15));
        System.out.println("pos x: " + this.myPos.getX() + "pos z: " + this.myPos.getZ());
        myAngle = 0;
        myTerrain = terrain;
        viewFrame = CoordFrame3D.identity().translate(myPos).translate(0, -1.5f, 0);
        
    }

    public void setView(GL3 gl) {
        Shader.setViewMatrix(gl, viewFrame.getMatrix());
        if(this.myAvatar.getShow()){
        	this.myAvatar.drawSelf(gl, viewFrame);
        }
    }
    
    private void calculateZoom(float zoomLevel){
    	this.distanceFromAvatar -= zoomLevel;
    }
    
    

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
            	if(this.myAvatar.getShow()){
            		myAngle -= 5;
            		float offsetX = 2*(float) Math.sin(Math.toRadians(myAngle));
            		float offsetZ = 2*(float) Math.cos(Math.toRadians(myAngle));
            		this.myPos = new Point3D(this.myPos.getX() - offsetX, this.myPos.getY(), this.myPos.getZ() - offsetZ);
            		System.out.println("avatar pos x: " + this.myAvatar.getPosition().getX() + "pos z: " + this.myAvatar.getPosition().getZ());
            		System.out.println("pos x: " + this.myPos.getX() + "pos z: " + this.myPos.getZ());
            		
            	}else{
            		myAngle -= 5;
            	}
            	System.out.print("angle:" + myAngle);
                break;

            case KeyEvent.VK_RIGHT:
            	if(this.myAvatar.getShow()){
            		myAngle += 5;
            		float offsetX = this.distanceFromAvatar*(float) Math.sin(Math.toRadians(-myAngle));
            		float offsetZ = this.distanceFromAvatar*(float) Math.cos(Math.toRadians(-myAngle));
            		this.myPos = new Point3D(this.myPos.getX() - offsetX, this.myPos.getY(), this.myPos.getZ() - offsetZ);
            		System.out.println("avatar pos x: " + this.myAvatar.getPosition().getX() + "pos z: " + this.myAvatar.getPosition().getZ());
            		System.out.println("pos x: " + this.myPos.getX() + "pos z: " + this.myPos.getZ());
            	}else{
            		myAngle += 5;
            	}
                break;

            case KeyEvent.VK_DOWN:
                myPos = myPos.translate(-.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, -.1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosDown();
                break;

            case KeyEvent.VK_UP:
                myPos = myPos.translate(.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, .1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosUp();
                break;
                
            case KeyEvent.VK_A:
                this.myAvatar.setShow(!this.myAvatar.getShow());
                System.out.println("hi");
                break;
                
            case KeyEvent.VK_Z:
                this.calculateZoom(1);
                System.out.print(this.distanceFromAvatar);
                myPos = myPos.translate(0, 0, -.1f * this.distanceFromAvatar);
                
                break;
            case KeyEvent.VK_X:
                this.calculateZoom(-1);
                System.out.print(this.distanceFromAvatar);
                myPos = myPos.translate(0,0, .1f * this.distanceFromAvatar);
                break;
    		
        }
        myPos = new Point3D(myPos.getX(), -myTerrain.computeAltitude(-myPos.getX(), -myPos.getZ()), myPos.getZ());
        viewFrame = CoordFrame3D.identity().rotateY(myAngle);
        viewFrame = viewFrame.translate(myPos).translate(0, -1.5f, 0);

    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

}