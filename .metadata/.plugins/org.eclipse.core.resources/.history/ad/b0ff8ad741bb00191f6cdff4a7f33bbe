package unsw.graphics.world;

import java.awt.Color;
import java.io.IOException;

import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.opengl.GL3;
import unsw.graphics.CoordFrame3D;
import unsw.graphics.Shader;
import unsw.graphics.geometry.Point3D;

public class WorldCamera implements KeyListener {
    private Point3D myPos;
    private float myAngle; // Only rotate around y-axis
    private Terrain myTerrain;
    private CoordFrame3D viewFrame;
    private int dimLevel = 1;
    
    //avatar
    private Avatar myAvatar;
    private float distanceFromAvatar;
    private float angleToAvatar = 270;
    
    
    //torch
    private boolean showTorch = false;
    private Point3D direction;
    
    

    public WorldCamera(Terrain terrain, GL3 gl) throws IOException {
        myPos = new Point3D(-terrain.getWidth()/2f, 0f, -terrain.getDepth()*2f);
        myAngle = 0;
        myTerrain = terrain;
        viewFrame = CoordFrame3D.identity().translate(myPos).translate(0, -1.5f, 0);
        //needs to be positioned in line with camera
        //camera position for test 1: -5, 0 , -20
        //avatar is positioned just in front of camera
        this.myAvatar = new Avatar(terrain.getWidth()/2f, 10, terrain.getDepth()*2f - 7);
        //need distance to calculate rotation around avatar
        this.distanceFromAvatar = Math.abs(myPos.getZ() + this.myAvatar.getPosition().getZ());
        this.direction = new Point3D(this.myAvatar.getPosition().getX() +this.myPos.getX(),this.myAvatar.getPosition().getY()+this.myPos.getY() ,this.myAvatar.getPosition().getZ()+this.myPos.getZ());
    }

    public void setView(GL3 gl) {
        Shader.setViewMatrix(gl, viewFrame.getMatrix());
    }
    
    public CoordFrame3D getView(){
    	return viewFrame;
    }
    
    
    public Avatar getAvatar(){
    	return this.myAvatar;
    }
    

    @Override
    //still move avatar even if not showing
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
            	myAngle -= 5;
            	this.myAvatar.setAngle(5);
        		this.angleToAvatar -= 5;
        		if(this.myAvatar.getShow()){
        		float cameraX = (float) (this.distanceFromAvatar * Math.cos(Math.toRadians(this.angleToAvatar)) - this.myAvatar.getPosition().getX());
        		float cameraY = (float) (this.distanceFromAvatar * Math.sin(Math.toRadians(this.angleToAvatar)) - this.myAvatar.getPosition().getZ());
        		myPos = new Point3D(cameraX, myPos.getY(), cameraY);
        		}
                break;

            case KeyEvent.VK_RIGHT:
            	myAngle += 5;
        		this.myAvatar.setAngle(-5);
        		this.angleToAvatar += 5;
        		if(this.myAvatar.getShow()){
	        		float cameraX = (float) (this.distanceFromAvatar * Math.cos(Math.toRadians(this.angleToAvatar)) - this.myAvatar.getPosition().getX());
	        		float cameraY = (float) (this.distanceFromAvatar * Math.sin(Math.toRadians(this.angleToAvatar)) - this.myAvatar.getPosition().getZ());
	        		myPos = new Point3D(cameraX, myPos.getY(), cameraY);
        		}
                break;

            case KeyEvent.VK_DOWN:
                myPos = myPos.translate(-.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, -.1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosDown(this.myAngle);
                break;

            case KeyEvent.VK_UP:
                myPos = myPos.translate(.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, .1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosUp(this.myAngle);
                break;
                
            //press A to show avatar    
            case KeyEvent.VK_A:
                this.myAvatar.setShow(!this.myAvatar.getShow());
                break;
            
            case KeyEvent.VK_L:
            	if(this.myTerrain.getSunlightColour() == Color.YELLOW.brighter()){
            		this.myTerrain.setSunlightColour(Color.YELLOW.darker().darker());
            	}else if(this.dimLevel == 1){
            		this.myTerrain.setSunlightColour(Color.YELLOW.brighter());
            	}else if(this.dimLevel == 2){
            		this.myTerrain.setSunlightColour(Color.YELLOW.darker().darker());
            	}else if(this.dimLevel == 3){
            		this.myTerrain.setSunlightColour(Color.YELLOW.darker().darker().darker());
            	}else{
            		this.myTerrain.setSunlightColour(Color.YELLOW.brighter());
            		this.dimLevel = 0;
            	}
            	this.dimLevel++;
            	break;
            	
            	//press S to show torch    
            case KeyEvent.VK_S:
                this.showTorch = !this.showTorch;
                break;
                
    		
        }
        //camera climbs terrain the same time avatar does
        if(this.myAvatar.getShow()){
        	myPos = new Point3D(myPos.getX(), -myTerrain.computeAltitude(this.myAvatar.getPosition().getX(), this.myAvatar.getPosition().getZ()), myPos.getZ());
        }else{
        	myPos = new Point3D(myPos.getX(), -myTerrain.computeAltitude(-myPos.getX(), -myPos.getZ()), myPos.getZ());
        }
        //set position of avatar
        this.myAvatar.setPos(new Point3D(this.myAvatar.getPosition().getX(), myTerrain.computeAltitude(this.myAvatar.getPosition().getX(), this.myAvatar.getPosition().getZ()), this.myAvatar.getPosition().getZ()));
        viewFrame = CoordFrame3D.identity().rotateY(myAngle);
        viewFrame = viewFrame.translate(myPos).translate(0, -1.5f, 0);
        this.direction = new Point3D(this.myPos.getX()+ this.myAvatar.getPosition().getX(),this.myPos.getY() + this.myAvatar.getPosition().getY() , this.myPos.getZ() + this.myAvatar.getPosition().getZ());

    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
    
    public void setColor(GL3 gl){
    	Shader.setColor(gl, "sunlight", Color.YELLOW.GRAY);
    }
    
    public void setTorch(GL3 gl, CoordFrame3D frame) {
        //set torch direction
    	
    	if(this.showTorch){
    		//camera pos
	    	Point3D pos = new Point3D(-this.myPos.getX(),-this.myPos.getY() ,-this.myPos.getZ());
	    	//fragment shader calculates the vector from torchStart(camera position) to torchEnd
	    	Point3D avPos = new Point3D(this.myAvatar.getPosition().getX(),-this.myPos.getY() ,this.myAvatar.getPosition().getZ());
	    	pos = frame.transform(this.direction);
	        Shader.setPoint3D(gl, "camPos", pos);
	        avPos = frame.transform(avPos);
	        Shader.setPoint3D(gl, "torchEnd", avPos);
	        
	        Shader.setFloat(gl, "inner_cutoff", (float)Math.cos(12.5));
	        Shader.setFloat(gl, "outer_cutoff", 0.993f);
	        
	
	        Shader.setPenColor(gl, Color.WHITE);
    	}else{
    		Point3D pos = new Point3D(0,this.myPos.getY(),0);
	    	Point3D torchStart = frame.transform(pos);
	        Shader.setPoint3D(gl, "myDirection", torchStart);
	
	        Shader.setPenColor(gl, Color.WHITE);
    	}
    }

}