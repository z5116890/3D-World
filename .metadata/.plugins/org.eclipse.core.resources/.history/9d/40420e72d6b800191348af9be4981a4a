
out vec4 outputColor;

uniform vec4 input_color;

uniform mat4 view_matrix;

// Light properties
// uniform vec3 lightPos;
// uniform vec3 lightIntensity;
uniform vec3 ambientIntensity;
uniform vec3 sunlightDirection;
uniform vec3 sunlight;
uniform float attenuation;

//torch properties
uniform vec3 torchStart;
uniform vec3 torchEnd;
uniform vec3 torchlight;

// Material properties
uniform vec3 ambientCoeff;
uniform vec3 diffuseCoeff;
uniform vec3 specularCoeff;
uniform float phongExp;

uniform sampler2D tex;

#define MAX_LIGHTS 10
uniform int numLights;


in vec4 viewPosition;
in vec3 m;

in vec2 texCoordFrag;

void main()
{
	vec3 m_unit = normalize(m);
    // Compute the s, v and r vectors
   vec3 s = normalize(view_matrix*vec4(sunlightDirection,1) - viewPosition).xyz;
    //vec3 s = normalize(-sunlightDirection);
 
    vec3 v = normalize(-viewPosition.xyz);
    vec3 r = normalize(reflect(-s,m_unit));
	
    vec3 ambient = ambientIntensity*ambientCoeff;
    vec3 diffuse = max(sunlight*diffuseCoeff*dot(normalize(m_unit),s), 0.0);
    

    // Only show specular reflections for the front face
    if (dot(m_unit,s) > 0)
        specular = max(sunlight*specularCoeff*pow(dot(r,v),phongExp), 0.0);
    else
        specular = vec3(0);


	 //avatar torch
    vec3 coneDirection = normalize(torchEnd);
    vec3 rayDirection = -normalize(torchStart);
    float lightToSurfaceAngle = degrees(acos(dot(rayDirection, coneDirection)))
    if(lightToSurfaceAngle > 20)
    	attenuation = 0.0f;
    else
    	attenuation = 1.0f;
    
    //ambient
    vec3 ambientTorch = ambientCoeff * torchlight * ambientIntensity;
    
    vec4 ambientAndDiffuse = vec4(ambient + diffuse, 1)*attenuation;
    

    outputColor = ambientAndDiffuse*input_color*texture(tex, texCoordFrag) + vec4(specular, 1) + ambientTotch;
}
