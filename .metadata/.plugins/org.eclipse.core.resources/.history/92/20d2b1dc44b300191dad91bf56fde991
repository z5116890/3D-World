package unsw.graphics.world;

import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.opengl.GL3;
import unsw.graphics.CoordFrame3D;
import unsw.graphics.Shader;
import unsw.graphics.geometry.Point3D;

public class WorldCamera implements KeyListener {
    private Point3D myPos;
    private float myAngle; // Only rotate around y-axis
    private Terrain myTerrain;
    private CoordFrame3D viewFrame;
    
    //avatar
    private Avatar myAvatar;
    private float distanceFromAvatar = 50;
    private float angleAroundAvatar = 0;
    

    public WorldCamera(Terrain terrain, Avatar avatar) {
        myPos = new Point3D(-terrain.getWidth()/2f, 0f, -terrain.getDepth()*2f);
        myAngle = 0;
        myTerrain = terrain;
        viewFrame = CoordFrame3D.identity().translate(myPos).translate(0, -1.5f, 0);
        this.myAvatar = avatar;
        this.myAvatar.setPos(new Point3D(5, 0f,7));
    }

    public void setView(GL3 gl) {
        Shader.setViewMatrix(gl, viewFrame.getMatrix());
    }
    
    private void calculateZoom(float zoomLevel){
    	this.distanceFromAvatar -= zoomLevel;
    }
    
    

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
            	if(this.myAvatar.getShow()){
            		float hypotenuse = this.distanceFromAvatar*(float) Math.sin(Math.toRadians(-myAngle));
            		System.out.println(hypotenuse);
            		float offsetX = hypotenuse*(float) Math.cos(Math.toRadians(myAngle));
            		float offsetZ = hypotenuse*(float) Math.sin(Math.toRadians(myAngle));
            		this.myAvatar.setPos(new Point3D(this.myAvatar.getPosition().getX() - offsetX, this.myAvatar.getPosition().getY(), this.myAvatar.getPosition().getZ() - offsetZ));
            		
            		myAngle -= 0.1;
            	}else{
            		myAngle -= 5;
            	}
                break;

            case KeyEvent.VK_RIGHT:
            	if(this.myAvatar.getShow()){
            		myAngle += 0.1;
            		float hypotenuse = this.distanceFromAvatar*(float) Math.sin(Math.toRadians(-myAngle));
            		float offsetX = hypotenuse*(float) Math.cos(Math.toRadians(-myAngle));
            		float offsetZ = hypotenuse*(float) Math.sin(Math.toRadians(myAngle));
            		this.myAvatar.setPos(new Point3D(this.myAvatar.getPosition().getX() - offsetX, this.myAvatar.getPosition().getY(), this.myAvatar.getPosition().getZ() - offsetZ));
            	}else{
            		myAngle += 5;
            	}
                break;

            case KeyEvent.VK_DOWN:
                myPos = myPos.translate(-.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, -.1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosDown();
                break;

            case KeyEvent.VK_UP:
                myPos = myPos.translate(.1f * (float) Math.sin(Math.toRadians(-myAngle)) * 5, 0, .1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                this.myAvatar.setPosUp();
                break;
                
            case KeyEvent.VK_A:
                this.myAvatar.setShow(!this.myAvatar.getShow());
                System.out.println("hi");
                break;
                
            case KeyEvent.VK_Z:
                this.calculateZoom(0.5f);
                myPos = myPos.translate(0, 0, -.1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                break;
            case KeyEvent.VK_X:
                this.calculateZoom(-0.5f);
                myPos = myPos.translate(0, .1f * (float) Math.cos(Math.toRadians(-myAngle)) * 5);
                break;
    		
        }
        myPos = new Point3D(myPos.getX(), -myTerrain.computeAltitude(-myPos.getX(), -myPos.getZ()), myPos.getZ());
        viewFrame = CoordFrame3D.identity().rotateY(myAngle);
        viewFrame = viewFrame.translate(myPos).translate(0, -1.5f, 0);

    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

}