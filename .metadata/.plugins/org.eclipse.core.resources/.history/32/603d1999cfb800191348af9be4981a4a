package unsw.graphics.world;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import com.jogamp.newt.event.KeyEvent;
import com.jogamp.newt.event.KeyListener;
import com.jogamp.newt.event.MouseEvent;
import com.jogamp.newt.event.MouseListener;
import com.jogamp.opengl.GL3;

import unsw.graphics.*;
import unsw.graphics.geometry.Point2D;
import unsw.graphics.geometry.Point3D;


/**
 * COMMENT: Comment Game
 *
 * This project at this stage is able to show the terrain
 * with trees based on the input level file, it is able
 * to be controlled by mouse for rotation. It can also
 * been controlled by keyboard direction keys to rotate
 * through y-axis and move forward and backward
 *
 * Both the terrain and trees are being textured using
 * different pattern
 *
 * @author malcolmr
 */
public class World extends Application3D {

    private Terrain terrain;
    private WorldCamera myCamera;
    private Avatar avatar;

    //data so we can drag around world
    private float rotateX = 0;
    private float rotateY = 0;
    private float posX = 0;
    private float posY = 0;
    private float posZ = 0;
    private static final int ROTATION_SCALE = 1;


    public World(Terrain terrain) throws IOException{
        super("Assignment 2", 800, 600);
        this.terrain = terrain;
        this.avatar = new Avatar(0, 0, 0);

    }

    /**
     * Load a level file and display it.
     *
     * @param args - The first argument is a level file in JSON format
     * @throws FileNotFoundException change run configurations
     */
    public static void main(String[] args) throws IOException {
        Terrain terrain = LevelIO.load(new File(args[0]));
        World world = new World(terrain);
        world.start();
    }

    @Override
    public void display(GL3 gl) {
        super.display(gl);
        CoordFrame3D frame = CoordFrame3D.identity()
                .translate(posX, posY, posZ)
                .rotateX(rotateX)
                .rotateY(rotateY);
        
        this.myCamera.setView(gl);
        this.terrain.drawSelf(gl, frame);
        
        //if avatar showing then draw it every frame
        if(this.myCamera.getAvatar().getShow()){
        	this.myCamera.getAvatar().drawSelf(gl);
        }
        
    }


    @Override
    public void destroy(GL3 gl) {
        super.destroy(gl);
        this.terrain.destroyObjects(gl);
        this.avatar.destroy(gl);
    }

    @Override
    public void init(GL3 gl) {
        super.init(gl);

        Shader shader = new Shader(gl, "shaders/vertex_directional_tex.glsl",
                "shaders/fragment_directional_tex.glsl");

        
        terrain.makeTerrain(gl);
        //initialise camera and avatar
        try {
			this.myCamera = new WorldCamera(terrain, gl);
			this.myCamera.getAvatar().init(gl);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        getWindow().addKeyListener(myCamera);
        shader.use(gl);
        
    }

    @Override
    public void reshape(GL3 gl, int width, int height) {
        super.reshape(gl, width, height);
        Shader.setProjMatrix(gl, Matrix4.perspective(60, width / (float) height, 1, 100));
    }

    


}
