package unsw.graphics.world;



import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL3;

import unsw.graphics.*;
import unsw.graphics.geometry.Point2D;
import unsw.graphics.geometry.Point3D;
import unsw.graphics.geometry.TriangleMesh;



/**
 * COMMENT: Comment HeightMap 
 *
 * @author malcolmr
 */
public class Terrain {

    private int width;
    private int depth;
    private float[][] altitudes;
    private List<Tree> trees;
    private List<Road> roads;
    private Vector3 sunlight;

    private Texture myTexture;
    private String textureFilename = "res/Textures/grass.bmp";
    private String textureExtension = "bmp";

    private List<TriangleMesh> terrainMeshes;
    private Color sunlightColour = Color.YELLOW;

    /**
     * Create a new terrain
     *
     * @param width The number of vertices in the x-direction
     * @param depth The number of vertices in the z-direction
     * @throws IOException 
     */
    public Terrain(int width, int depth, Vector3 sunlight) throws IOException {
        this.width = width;
        this.depth = depth;
        altitudes = new float[width][depth];
        trees = new ArrayList<Tree>();
        roads = new ArrayList<Road>();
        this.sunlight = sunlight;
        terrainMeshes = new ArrayList<>();
    }

    public List<Tree> trees() {
        return trees;
    }

    public List<Road> roads() {
        return roads;
    }

    public Vector3 getSunlight() {
        return sunlight;
    }

    public int getWidth(){return width;}
    public int getDepth(){return depth;}

    /**
     * Set the sunlight direction. 
     * 
     * Note: the sun should be treated as a directional light, without a position
     * 
     * @param dx
     * @param dy
     * @param dz
     */
    public void setSunlightDir(float dx, float dy, float dz) {
        sunlight = new Vector3(dx, dy, dz);      
    }

    /**
     * Get the altitude at a grid point
     * 
     * @param x
     * @param z
     * @return
     */
    public double getGridAltitude(int x, int z) {
        return altitudes[x][z];
    }

    /**
     * Set the altitude at a grid point
     * 
     * @param x
     * @param z
     * @return
     */
    public void setGridAltitude(int x, int z, float h) {
        altitudes[x][z] = h;
    }

    /**
     * Get the altitude at an arbitrary point. 
     * Non-integer points should be interpolated from neighbouring grid points
     * 
     * @param x
     * @param z
     * @return
     */
    public float computeAltitude(float x, float z){

        //grid made of 2 triangles is made of (x1, z1)---(x2, z1)
        //                                    |                 |
        //                                    | .(x,z)          |
        //      							  |                 |
        //									  (x1, z2)---(x2, z2)
        //next array corresponds to z
        //next element corresponds to x
        //y corresponds to altitude

        if (x < 0 || x > width - 1 || z < 0 || z > depth - 1){
            return 0;
        }
        //x left
        int x1 = (int) Math.floor(x);
        //x right
        int x2 = (int) Math.ceil(x);
        //z towards negative
        int z1 = (int) Math.floor(z);
        //z towards positive
        int z2 = (int) Math.ceil(z);


        //if x and z are existing elements
        if(x == Math.ceil(x) && z == Math.ceil(z)){
            return this.altitudes[(int) x][(int) z];
        }
        //if target point is on x or z line
        if(x == Math.round(x)){
            return bilinearInterpolation(z, z1, z2, getGridAltitude(Math.round(x), z1), getGridAltitude(Math.round(x), z2));
        }
        if(z == Math.round(z)){
            return bilinearInterpolation(x, x1, x2, getGridAltitude(x1, Math.round(z)), getGridAltitude(x2, Math.round(z)));
        }

        float xOfR2 = findX(x1,z2,x2,z1,z);
        //if target point is on the middle line
        if(xOfR2 == x) {
            return bilinearInterpolation(z, z2, z1, getGridAltitude(x1,z2), getGridAltitude(x2, z1));
        }
        if(inside(x1,z1,x2,z1,x1,z2,x,z)) {
            float fr1 = bilinearInterpolation(z, z2, z1, getGridAltitude(x1,z2), getGridAltitude(x1, z1));
            float fr2 = bilinearInterpolation(z, z2, z1, getGridAltitude(x1,z2), getGridAltitude(x2, z1));
            return bilinearInterpolation(x, findX(x1,z1,x1,z2,z), xOfR2,fr1, fr2);
        }
        else{
            float fr1 = bilinearInterpolation(z, z1, z2, getGridAltitude(x2,z1), getGridAltitude(x2, z2));
            float fr2 = bilinearInterpolation(z, z1, z2, getGridAltitude(x2,z1), getGridAltitude(x1, z2));
            return bilinearInterpolation(x, findX(x2,z1,x2,z2,z), xOfR2,fr1, fr2);
        }
    }
    private float findX(int x1,int z1, int x2, int z2, float z){
        if(x1==x2){
            return x1;
        }
        float k = ((float)z1-(float)z2)/((float)x1-(float)x2);
        float b = (float)z2-k*(float)x2;
        return (z-b)/k;
    }
    private float bilinearInterpolation(double x, double x1, double x2, double alt1, double alt2){
    	return (float) (((x - x1) / (x2 - x1)) * alt2 +
    		      ((x2 - x) / (x2 - x1)) * alt1);
    	
    }
    
    
    private double area(float x1, float z1, float x2, float z2, float x3, float z3) {
    	return Math.abs((x1*(z2-z3) + x2*(z3-z1)+ x3*(z1-z2))/2.0); 
    } 
    
    //given a point and 3 points of triangle, check to see if point lies inside triangle by calculating area.
    private boolean inside(float x1, float y1, float x2, float y2, float x3, float y3, float x, float y){
    	// Calculate total area of triangle 
        double A = area (x1, y1, x2, y2, x3, y3); 
       
       // Calculate area of triangle 1 with given point as one of the vertices.
        double A1 = area (x, y, x2, y2, x3, y3); 
       
       // Calculate area of triangle 2 with given point as one of the vertices.
        double A2 = area (x1, y1, x, y, x3, y3); 
       
      // Calculate area of triangle 3 with given point as one of the vertices.
        double A3 = area (x1, y1, x2, y2, x, y); 
         
       // Check if sum of triangles 1,2 and 3 is same as total area of trianlge
        return (A == A1 + A2 + A3); 
    
    }
    
    

    /**
     * Add a tree at the specified (x,z) point. 
     * The tree's y coordinate is calculated from the altitude of the terrain at that point.
     * 
     * @param x
     * @param z
     */
    public void addTree(float x, float z) throws IOException {
        float y = computeAltitude(x, z);
        Tree tree = new Tree(x, y, z);
        trees.add(tree);
    }


    /**
     * Add a road. 
     * 
     * @param x
     * @param z
     */
    public void addRoad(float width, List<Point2D> spine) {
        Road road = new Road(width, spine);
        roads.add(road);        
    }
    
    
    //compute points from 2d array altitude
    public void makeTerrain(GL3 gl){
        myTexture = new Texture(gl, textureFilename, textureExtension, false);
        Point3D[][] terrain3D = new Point3D[width][depth];
        List<Point2D> firstTriangle = new ArrayList<>();
        firstTriangle.add(new Point2D(1, 1));
        firstTriangle.add(new Point2D(0, 0));
        firstTriangle.add(new Point2D(1, 0));
        List<Point2D> SecTriangle = new ArrayList<>();
        SecTriangle.add(new Point2D(1, 1));
        SecTriangle.add(new Point2D(0, 1));
        SecTriangle.add(new Point2D(0, 0));
        for (int i=0; i<width; ++i) {
            for (int j=0; j<depth; ++j) {
                terrain3D[i][j] = new Point3D(i, altitudes[i][j], j);
            }
        }
        for (int j=0; j<depth-1; ++j) {
            for (int i=0; i<width-1; ++i) {
                TriangleMesh first = new TriangleMesh(Arrays.asList(terrain3D[i+1][j], terrain3D[i][j+1], terrain3D[i+1][j+1]), true, firstTriangle);
                first.init(gl);
                terrainMeshes.add(first);
                TriangleMesh second = new TriangleMesh(Arrays.asList(terrain3D[i+1][j], terrain3D[i][j], terrain3D[i][j+1]), true, SecTriangle);
                second.init(gl);
                terrainMeshes.add(second);
            }
        }
        this.makeTrees(gl);

    }
    
    
    public void drawSelf(GL3 gl, CoordFrame3D frame){
        //set texture
        Shader.setInt(gl, "tex", 0); // tex in the shader is the 0'th active texture

        gl.glActiveTexture(GL.GL_TEXTURE0); // All future texture operations are
        // for the 0'th active texture
        gl.glBindTexture(GL.GL_TEXTURE_2D, myTexture.getId()); // Bind the texture id of the
        // texture we want to the 0th active texture
        Shader.setPenColor(gl, Color.WHITE);
        this.setTerrainProperties(gl, frame);
        for(TriangleMesh curMesh : terrainMeshes){
            curMesh.draw(gl, frame);
        }
        for(Tree curTree : this.trees){
            curTree.drawSelf(gl, frame);
        }

    }
    //set lighting properties for terrain
    private void setTerrainProperties(GL3 gl, CoordFrame3D frame) {
        //set sunlight direction
        Point3D localSunlight = frame.transform(this.getSunlight().asPoint3D());
        Shader.setPoint3D(gl, "sunlightDirection", localSunlight);
        Shader.setColor(gl, "sunlight", Color.YELLOW);
        
        // Set the lighting properties
        //Shader.setPoint3D(gl, "lightPos", new Point3D(0, 0, 5));
        //Shader.setColor(gl, "lightIntensity", Color.WHITE);
        Shader.setColor(gl, "ambientIntensity", new Color(0.2f, 0.2f, 0.2f));

        // Set the material properties
        Shader.setColor(gl, "ambientCoeff", Color.WHITE);
        Shader.setColor(gl, "diffuseCoeff", new Color(0.5f, 0.5f, 0.5f));
        //no specular for grass
        Shader.setColor(gl, "specularCoeff", new Color(0, 0, 0));
        Shader.setFloat(gl, "phongExp", 16f);

        Shader.setPenColor(gl, Color.WHITE);
    }

    private void makeTrees(GL3 gl){
        for(Tree curTree : this.trees){
            curTree.init(gl);
            curTree.setTexture(gl);
        }
    }

    public void destroyObjects(GL3 gl){
        myTexture.destroy(gl);
        for(Tree curTree : this.trees){
            curTree.destroy(gl);
        }
    }
}
