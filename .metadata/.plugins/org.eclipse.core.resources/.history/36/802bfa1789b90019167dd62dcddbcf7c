
out vec4 outputColor;

uniform vec4 input_color;

uniform mat4 view_matrix;

// Light properties
// uniform vec3 lightPos;
// uniform vec3 lightIntensity;
uniform vec3 ambientIntensity;
uniform vec3 sunlightDirection;
uniform vec3 sunlight;
uniform vec3 myDirection;
uniform vec3 camPos;


// Material properties
uniform vec3 ambientCoeff;
uniform vec3 diffuseCoeff;
uniform vec3 specularCoeff;
uniform float phongExp;

uniform sampler2D tex;

in vec4 viewPosition;
in vec3 m;

in vec2 texCoordFrag;

void main()
{
//directional light
	vec3 m_unit = normalize(m);
    // Compute the s, v and r vectors
   vec3 s = normalize(view_matrix*vec4(sunlightDirection,1) - viewPosition).xyz;
    //vec3 s = normalize(-sunlightDirection);
    
    vec3 v = normalize(-viewPosition.xyz);
    vec3 r = normalize(reflect(-s,m_unit));

    vec3 ambient = ambientIntensity*ambientCoeff;
    vec3 diffuse = max(sunlight*diffuseCoeff*dot(normalize(m_unit),s), 0.0);
    vec3 specular;

    // Only show specular reflections for the front face
    if (dot(m_unit,s) > 0)
        specular = max(sunlight*specularCoeff*pow(dot(r,v),phongExp), 0.0);
    else
        specular = vec3(0);

    vec4 ambientAndDiffuse = vec4(ambient + diffuse, 1);

    outputColor = ambientAndDiffuse*input_color*texture(tex, texCoordFrag) + vec4(specular, 1);
    
//spotlight
	float cutoff = 12.0;
	
   	vec3 torch = normalize(view_matrix*vec4(camPos,1) - viewPosition).xyz;
   	float theta = dot(viewPosition.xyz, normalize(-myDirection));
    //vec3 s = normalize(-sunlightDirection);
    ambientAndDiffuse = vec4(ambient, 1);
    if(theta > cutoff)
    	diffuse = max(diffuseCoeff*dot(normalize(m_unit),torch), 0.0);
    	ambientAndDiffuse = vec4(ambient + diffuse, 1);
	
   

    outputColor = outputColor + ambientAndDiffuse*input_color*texture(tex, texCoordFrag);
    
}
